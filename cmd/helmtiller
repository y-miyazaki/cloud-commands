#!/bin/bash
#------------------------------------------------------------------------
# install helm tiller.
# note: remote tiller since helm3, so if you action helm3 command, this command can't action.
# https://v3.helm.sh/docs/faq/
# see tiller
# https://helm.sh/docs/glossary/
#------------------------------------------------------------------------
set -e

#------------------------------------------------------------------------
# variables
#------------------------------------------------------------------------
# script directory
SCRIPT_DIR=$(cd "$(dirname "${0}")"; pwd)

# usage function
function usage () {
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    printf "${RED}${1}${NC}\n"
    cat <<EOF
This command installs helm tiller.

Usage:
    $(basename "${0}")
Options:
    no options
EOF
    exit 1
}

# check kubectl command
if [ -z "$(command -v kubectl)" ]; then
    usage "This command need to install \"kubectl\"."
fi
# check helm command
if [ -z "$(command -v helm)" ]; then
    usage "This command need to install \"helm\"."
fi

#------------------------------------------------------------------------
# note: remote tiller since helm3, so if you action helm3 command, this command can't action.
# https://v3.helm.sh/docs/faq/
#------------------------------------------------------------------------
VERSION=$(helm version)
MAJOR_VERSION=$(echo $VERSION | sed -e "s@.*Version:\"v\([0-9]\+\).*\}@\1@g")
if [ "${MAJOR_VERSION}" -ge 3 ]; then
    usage "you don't need to install tiller since helm3."
fi

IS_TILLER_INSTALL=$(kubectl get serviceaccount -n kube-system | grep tiller | wc -l | tr -d '\n')
if [ "${IS_TILLER_INSTALL}" -eq "0" ]; then
    kubectl apply -f "${SCRIPT_DIR}"/files/kubernetes/helm-rbac.yaml
    helm init --service-account tiller --node-selectors "beta.kubernetes.io/os"="linux"
else
    echo "Tiller already created."
fi

# helm init client
helm init --client-only

# Check Server
for ((i=0; i < 20; i++));
do
    IS_SET_HELM=$(helm version | grep Server | wc -l | tr -d '\n')
    if [ "${IS_SET_HELM}" -eq "1" ]; then
        kubectl get serviceaccount -n kube-system | grep tiller
        helm version
        echo "Tiller server runs."
        exit 0
    fi
    sleep 3
done

echo "Tiller server can't ready..."
exit 1
