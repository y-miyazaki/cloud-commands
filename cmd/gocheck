#!/bin/bash
#------------------------------------------------------------------------
# Golang static analysis
# This command uses go and golangci-lint for unit testing and static analysis.
#------------------------------------------------------------------------
set -e

#------------------------------------------------------------------------
# variables
#------------------------------------------------------------------------
# files base path
SCRIPT_DIR=$(cd "$(dirname "${0}")"; pwd)
# check go source directory
DIR=.
# output coverage directory
COVER_DIR=coverage
# base check config yaml
GOLANGCI_LINT_CONFIG=${SCRIPT_DIR}/files/golang/base.golangci.yml
# check static analysis
IS_STATIC_ANALYSIS=0
# check go test
IS_TEST=0

# usage function
function usage () {
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    if [ -n "${1}" ]; then
        printf "%b%s%b\n" "${RED}" "${1}" "${NC}"
    fi
    cat <<EOF

This command uses go and golangci-lint for unit testing and static analysis.

Usage:
    $(basename "${0}") [<options>]
    $(basename "${0}")
    # golangci-lint
    $(basename "${0}") -a ./golangci-lint.yaml
    # unit test
    $(basename "${0}") -c -d /go/src/github.com/hogehoge/hogehoge -t -o cover
    # golangci-lint and unit test
    $(basename "${0}") -a ./golangci-lint.yaml -c -d /go/src/github.com/hogehoge/hogehoge -t -o cover

Options:
    -a {golangci-lint yaml}        static analytics yaml file(for check error) (default:${GOLANGCI_LINT_CONFIG})
    -c                             If set, a covertuna-based coverage file is output.
    -d {target directory}          Analysis target directory (default:.)
    -o {output coverage directory} Output coverage directory (default:coverage)
    -h                             Usage $(basename "${0}")
    -s                             If set, check static analysis
    -t                             If set, execute go test
EOF
    exit 1
}

while getopts a:cd:ho:st opt
do
    case $opt in
        a ) GOLANGCI_LINT_CONFIG=$OPTARG ;;
        c ) IS_COVERTUNA=1 ;;
        d ) DIR=$OPTARG ;;
        o ) COVER_DIR=$OPTARG ;;
        s ) IS_STATIC_ANALYSIS=1 ;;
        t ) IS_TEST=1 ;;
        h ) usage ;;
        \? ) usage ;;
    esac
done

# check
if [ -z "${DIR}" ]; then
    usage
fi
# check go command
if [ -z "$(command -v go)" ]; then
    usage "This command need to install \"go\"."
fi
cd "${DIR}"
if [ $IS_STATIC_ANALYSIS -eq 1 ]; then
    # check golangci-lint command
    if [ -z "$(command -v golangci-lint)" ]; then
        usage "This command need to \"golangci-lint\"."
    fi
    echo "#------------------------------------------------------------------------"
    echo "# check go static analytics...(If there was an error, the check failed.)"
    echo "#------------------------------------------------------------------------"
    set +e
    # --out-format checkstyle \
    golangci-lint run --tests=false \
    --issues-exit-code 1 \
    --disable-all \
    -c "${GOLANGCI_LINT_CONFIG}" \
    ./... ; result=$?
    set -e
    if [ $result -eq 1 ]; then
        echo "Static analysis failed..."
        echo ""
        exit 1
    else
        echo "Static analysis successed..."
    fi
fi
echo ""

if [ $IS_TEST -eq 1 ]; then
    # check gocover-cobertura command
    if [ -n "${IS_COVERTUNA}" ]; then
        if [ -z "$(command -v gocover-cobertura)" ]; then
            usage "This command need to \"gocover-cobertura\"."
        fi
    fi
    echo "#------------------------------------------------------------------------"
    echo "# go test..."
    echo "#------------------------------------------------------------------------"
    mkdir -p "${COVER_DIR}"
    go test $(go list ./... | grep -v /vendor/) -coverprofile="${COVER_DIR}"/coverage.out
    go tool cover -html="${COVER_DIR}"/coverage.out -o "${COVER_DIR}"/coverage.html
    if [ -n "${IS_COVERTUNA}" ]; then
        gocover-cobertura < "${COVER_DIR}"/coverage.out > "${COVER_DIR}"/coverage_cobertura.xml
    fi
fi
echo ""
