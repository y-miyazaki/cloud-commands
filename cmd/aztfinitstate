#!/bin/bash
#--------------------------------------------------------------
# Create Azure Storage for terraform state.
# This command creates a Storage Account for Terraform State.
# You can also add random hash to storage account name suffix.
#--------------------------------------------------------------
set -e

# init
IS_STORAGE_ACCOUNT_NAME_AUTO_HASH=0
DAYS=7
# usage function
function usage () {
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    if [ -n "${1}" ]; then
        printf "%b%s%b\n" "${RED}" "${1}" "${NC}"
    fi
    cat <<EOF

This command creates a Storage Account for Terraform State.
You can also add random hash to storage account name suffix.

Usage:
    $(basename "${0}") -g {resource group name} -l {location} -n {storage account name} -c {container name} -r [<options>]
    $(basename "${0}") -g your-resource-group -l japaneast -n ts -c tfstate -r

    ex: $(basename "${0}") -g tfstate -l japaneast -n ts -c tfstate -r

Options:
    -c {container name}       Name of Blob Container
    -g {resource group name}  Name of Resource Group
    -l {location}             Storage account location
    -n {storage account name} Storage account name
    -r                        If set, a random hash will suffix storage account name.
    -h                        Usage $(basename "${0}")
EOF
    exit 1
}

while getopts c:g:l:n:rh opt
do
    case $opt in
        c ) CONTAINER_NAME=$OPTARG ;;
        g ) RESOURCE_GROUP_NAME=$OPTARG ;;
        l ) LOCATION=$OPTARG ;;
        n ) STORAGE_ACCOUNT_NAME=$OPTARG ;;
        r ) IS_STORAGE_ACCOUNT_NAME_AUTO_HASH=1 ;;
        h ) usage ;;
        \? ) usage ;;
    esac
done

# check
if [ -z "${STORAGE_ACCOUNT_NAME}" ]; then
    usage
fi
if [ -z "${RESOURCE_GROUP_NAME}" ]; then
    usage
fi
if [ -z "${CONTAINER_NAME}" ]; then
    usage
fi
if [ -z "${LOCATION}" ]; then
    usage
fi

# option: add hash suffix to bucket name.
if [ $IS_STORAGE_ACCOUNT_NAME_AUTO_HASH -eq 1 ]; then
    RM=$(awk -v min=10000000 -v max=100000000 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
    STORAGE_ACCOUNT_NAME="${STORAGE_ACCOUNT_NAME}${RM}"
fi
# check az command
if [ -z "$(command -v az)" ]; then
    usage "This command need to \"az\"."
fi

# Create resource group
az group create --name "${RESOURCE_GROUP_NAME}" --location "${LOCATION}"

# Create storage account
az storage account create --resource-group "${RESOURCE_GROUP_NAME}" --name "${STORAGE_ACCOUNT_NAME}" --sku Standard_LRS --encryption-services blob --kind Storage --allow-blob-public-access false

# create delete policy
az storage blob service-properties delete-policy update --days-retained "${DAYS}" --account-name "${STORAGE_ACCOUNT_NAME}" --enable true

# Get storage account key
ACCOUNT_KEY=$(az storage account keys list --resource-group "${RESOURCE_GROUP_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}" --query [0].value -o tsv)

# Create blob container
az storage container create --name "${CONTAINER_NAME}" --account-name "${STORAGE_ACCOUNT_NAME}" --account-key "${ACCOUNT_KEY}"

echo "--------------------------------------------------------------"
echo "storage_account_name: $STORAGE_ACCOUNT_NAME"
echo "container_name: $CONTAINER_NAME"
echo "access_key: $ACCOUNT_KEY"
echo "--------------------------------------------------------------"
