#!/bin/bash
#--------------------------------------------------------------
# This script runs terraform command and create main_init.tf file.
# main_init.tf generates terraform backend block and provider(azurerm/azuread).
#
# if you want to run this script, need to add this following environment.
#- ENV
#- ARM_CLIENT_ID
#- ARM_CLIENT_SECRET
#- ARM_SUBSCRIPTION_ID
#- STORAGE_ACCOUNT_NAME
#- RESOURCE_GROUP_NAME
#- CONTAINER_NAME
#- IS_GENERATE_PROVIDER
#--------------------------------------------------------------
set -e

#------------------------------------------------------------------------
# variables
#------------------------------------------------------------------------
# script directory
SCRIPT_DIR=$(cd "$(dirname "${0}")"; pwd)
# provider.json
PROVIDER_FILE=
BASE_PROVIDER_FILE="${SCRIPT_DIR}"/files/azure/provider.json
USER_PROVIDER_FILE=provider.json

# usage function
function usage () {
    RED='\033[0;31m'
    NC='\033[0m' # No Color
    if [ -n "${1}" ]; then
        printf "%b%s%b\n" "${RED}" "${1}" "${NC}"
    fi
    cat <<EOF

This script runs terraform command and create main_init.tf file.
main_init.tf generates terraform backend block and provider(azurerm/azuread).

Usage:
    $(basename "${0}") {commands} [<options>]
    $(basename "${0}") plan
    $(basename "${0}") apply

Options:
    same terraform command options
EOF
    exit 1
}

# check jq command
if [ -z "$(command -v jq)" ]; then
    usage "This command need to install \"jq\"."
fi
# check terraform command
if [ -z "$(command -v terraform)" ]; then
    usage "This command need to install \"terraform\"."
fi

# arguments
COMMAND=$*
if [ $# -eq 0 ]; then
    usage
fi

# get provider.json
if [ -e "${USER_PROVIDER_FILE}" ]; then
    PROVIDER_FILE="${USER_PROVIDER_FILE}"
elif [ -e "${BASE_PROVIDER_FILE}" ]; then
    PROVIDER_FILE="${BASE_PROVIDER_FILE}"
else
    echo "can't find provider.json..."
    exit 1
fi
REQUIRED_VERSION=$(cat "${PROVIDER_FILE}" | jq -r .terraform.required_version)
BACKEND_AZURERM_KEY=$(cat "${PROVIDER_FILE}" | jq -r .terraform.backend_azurerm.key)
AZURERM_VERSION=$(cat "${PROVIDER_FILE}" | jq -r .azurerm.version)
AZURERD_VERSION=$(cat "${PROVIDER_FILE}" | jq -r .azuread.version)

# check environment
if [ -z "${ENV}" ]; then
    usage "This command need to set \"ENV\" environment parameter."
fi
if [ -z "${ARM_CLIENT_ID}" ]; then
    usage "This command need to set \"ARM_CLIENT_ID\" environment parameter."
fi
if [ -z "${ARM_CLIENT_SECRET}" ]; then
    usage "This command need to set \"ARM_CLIENT_SECRET\" environment parameter."
fi
if [ -z "${ARM_TENANT_ID}" ]; then
    usage "This command need to set \"ARM_TENANT_ID\" environment parameter."
fi
if [ -z "${ARM_SUBSCRIPTION_ID}" ]; then
    usage "This command need to set \"ARM_SUBSCRIPTION_ID\" environment parameter."
fi
if [ -z "${STORAGE_ACCOUNT_NAME}" ]; then
    usage "This command need to set \"STORAGE_ACCOUNT_NAME\" environment parameter."
fi
if [ -z "${RESOURCE_GROUP_NAME}" ]; then
    usage "This command need to set \"RESOURCE_GROUP_NAME\" environment parameter."
fi
if [ -z "${CONTAINER_NAME}" ]; then
    usage "This command need to set \"CONTAINER_NAME\" environment parameter."
fi
if [ -z "${IS_GENERATE_PROVIDER}" ]; then
    usage "This command need to set \"IS_GENERATE_PROVIDER\" environment parameter."
fi

# export TF_LOG=1
# export TF_LOG_PATH='./terraform.log'
rm -f terraform.log crash.log main_init.tf
if [ "${IS_GENERATE_PROVIDER}" -eq "1" ]; then
    cp -p "${SCRIPT_DIR}"/files/azure/main.template.tf ./main_init.tf
    cat ./main_init.tf | sed -i -e "s@##REQUIRED_VERSION##@${REQUIRED_VERSION}@g" ./main_init.tf
    cat ./main_init.tf | sed -i -e "s@##AZURERM_STORAGE_ACCOUNT_NAME##@${STORAGE_ACCOUNT_NAME}@g" ./main_init.tf
    cat ./main_init.tf | sed -i -e "s@##AZURERM_CONTAINER_NAME##@${CONTAINER_NAME}@g" ./main_init.tf
    cat ./main_init.tf | sed -i -e "s@##AZURERM_KEY##@${BACKEND_AZURERM_KEY}@g" ./main_init.tf
    cat ./main_init.tf | sed -i -e "s@##AZURERM_VERSION##@${AZURERM_VERSION}@g" ./main_init.tf
    cat ./main_init.tf | sed -i -e "s@##AZURERD_VERSION##@${AZURERD_VERSION}@g" ./main_init.tf
fi
terraform init
# shellcheck disable=SC2086
terraform ${COMMAND} -var-file=terraform."${ENV}".tfvars
